
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog(){
	if (devel || grade) PLPRuntimeLog.initLog();
	}
	@After
	public void printLog(){
	System.out.println(PLPRuntimeLog.getString());
	}


	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname +  " {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[2];//create command line argument array to initialize params, none in this case
		args[0] = "0";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	@Test
	public void testCase0() throws Exception {
		//scan, parse, and type check the program
		String progname = "testCase0";
		String input = progname + " {boolean x x<-true;integer eee eee<-0;integer qqq qqq<-eee;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testCase1() throws Exception {
		//scan, parse, and type check the program
		String progname = "testCase1";
		String input = progname + " { boolean m m <- false; if(m) { m <- true;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	
	
	@Test
	public void testCase2() throws Exception {
		//scan, parse, and type check the program
		String progname = "testCase2";
		String input = progname + " { integer u u<-screenwidth;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0];
//        args[0] = "918.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	
	@Test
	public void testCase3() throws Exception {
		//scan, parse, and type check the program
		//String progname = "exprComp";
		String input = "chu  {integer x \ninteger y \nx <-100; \ny <- 200; \ny <- x*y+x-y;\n}" ;
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0];
//        args[0] = "918.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}



	@Test
	public void testCase4() throws Exception {
		//scan, parse, and type check the program
		//String progname = "exprComp";
		String input = "testcasw {integer x boolean t integer r x<-77; t<-true; r<-4;}" ;
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0];
//        args[0] = "918.jpg";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}


	

}
